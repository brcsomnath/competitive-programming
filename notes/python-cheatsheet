## Python Cheat Sheet

## Deque

from collections import dequeue
list = [1,2,4]
*list = 1,2,4  # unpacks a list
list = dequeue(list)
list.popleft()

yield something

The yield statement suspends functionâ€™s execution and sends a value back to caller,
but retains enough state to enable function to resume where it is left off. 
When resumed, the function continues execution immediately after the last yield run.

def simpleGeneratorFun(): 
    yield 1
    yield 2
    yield 3
  
# Driver code to check above generator function 
for value in simpleGeneratorFun():  
    print(value) 

Dictionary:
v = defaultdict(lambda: -1)
graph = defaultdict(list)

Binary Search:

import bisect
Syntax: bisect(list, target, lower, upper) -> By default returns the rightmost index of smaller element
bisect_left(ist, target, lower, upper) -> returns left most index

1. ord() - single char string to binary
2. bin(non-integer number, base)


list.sort(key=..., reverse=...)
sorted(list, key=..., reverse=...)
 sorted(x, key=sum) -> based on sum of both

Note: Simplest difference between sort() and sorted() is: sort() doesn't return any value while, sorted() returns an iterable list.

## Fast I/O
from sys import stdin, stdout
n = stdin.readout()
stdout.write()

## Data Structures

1. Heap:

import heapq 
  
li = [5, 7, 9, 1, 3] 
  
# using heapify to convert list into heap 
heapq.heapify(li) 
  
# printing created heap 
print ("The created heap is : ",end="") 
print (list(li)) 
  
# using heappush() to push elements into heap 
# pushes 4 
heapq.heappush(li,4) 

import heapq
listForTree = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]    
heapq.heapify(listForTree)             # for a min heap
heapq._heapify_max(listForTree)        # for a maxheap!!
If you then want to pop elements, use:

heapq.heappop(minheap)      # pop from minheap
heapq._heappop_max(maxheap) # pop from maxheap

2. Queue:

import queue
// Initialize queue
Syntax: queue.Queue(maxsize)

// Insert Element
Syntax: Queue.put(data)

// Get And remove the element
Syntax: Queue.get()

3. Priority Queue

from Queue import PriorityQueue
        q = PriorityQueue()

q.put((l.val, l))
        while not q.empty():
            val, node = q.get()


from collections import Counter 
  
arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5] 
counter = Counter(arr) 
top_three = counter.most_common(3) 
print(top_three) 


Intersection between two sets:
x = set([1,2,3])
y = set([1,2])
x & y = set([1,2])